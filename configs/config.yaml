# Yellow Rust Segmentation Configuration

# Dataset Configuration
data:
  raw_data_path: "../YELLOW-RUST-19"
  processed_data_path: "data/processed"
  masks_path: "data/masks"
  image_size: [256, 256]
  num_classes: 2  # 0: Healthy, 1: Rust-infected
  
  # Data Split
  train_split: 0.7
  val_split: 0.15
  test_split: 0.15
  
  # Class mapping for segmentation
  class_mapping:
    healthy: ["0"]  # Healthy class
    infected: ["R", "MR", "MRMS", "MS", "S"]  # All infected classes

# Model Configuration
model:
  architecture: "unet"
  encoder_name: "resnet34"
  encoder_weights: "imagenet"
  in_channels: 3
  classes: 2
  activation: null  # Use default activation
  freeze_encoder: true  # Freeze encoder initially

# Training Configuration
training:
  epochs: 30
  batch_size: 8
  learning_rate: 1e-4
  optimizer: "adam"
  weight_decay: 1e-5
  
  # Loss Configuration
  loss:
    type: "combined"  # CrossEntropy + Dice
    dice_weight: 0.5
    ce_weight: 0.5
  
  # Early Stopping
  early_stopping:
    patience: 7
    min_delta: 1e-4
    monitor: "val_loss"
  
  # Learning Rate Scheduler
  scheduler:
    type: "reduce_on_plateau"
    factor: 0.5
    patience: 5
    min_lr: 1e-7

# Data Augmentation
augmentation:
  train:
    horizontal_flip: 0.5
    vertical_flip: 0.5
    rotate90: 0.5
    brightness_contrast:
      brightness_limit: 0.2
      contrast_limit: 0.2
      p: 0.5
    random_crop:
      height: 224
      width: 224
      p: 0.3
  
  val:
    # No augmentation for validation
    normalize_only: true

# Preprocessing
preprocessing:
  histogram_equalization: true
  normalization:
    mean: [0.485, 0.456, 0.406]  # ImageNet means
    std: [0.229, 0.224, 0.225]   # ImageNet stds

# Evaluation Metrics
metrics:
  - "pixel_accuracy"
  - "precision"
  - "recall"
  - "f1_score"
  - "iou"
  - "dice_coefficient"
  - "cohen_kappa"

# Logging and Monitoring
logging:
  use_wandb: true
  project_name: "yellow_rust_segmentation"
  experiment_name: "unet_resnet34"
  log_interval: 10
  save_model_interval: 5

# Paths
paths:
  models_dir: "models"
  results_dir: "results"
  logs_dir: "logs"
  checkpoints_dir: "models/checkpoints"

# Export Configuration
export:
  formats: ["onnx", "torchscript"]
  onnx:
    opset_version: 11
    dynamic_axes: true
  
# Deployment Configuration
deployment:
  target_device: "jetson"  # jetson, cpu, gpu
  inference_batch_size: 1
  optimization:
    tensorrt: true
    fp16: true

# Hardware Configuration
hardware:
  device: "cuda"  # cuda, cpu
  num_workers: 0
  pin_memory: true
  mixed_precision: true